
0001_GPIO_7SEGMENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000af0  08000af0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000af4  08000af4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000020  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001ef1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000070d  00000000  00000000  00021f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002d0  00000000  00000000  00022648  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000258  00000000  00000000  00022918  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000011e1  00000000  00000000  00022b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000afa  00000000  00000000  00023d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002484b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009dc  00000000  00000000  000248c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000252a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ad8 	.word	0x08000ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08000ad8 	.word	0x08000ad8

080001c8 <button_init>:
#include "stm32f4xx.h"

void button_init()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 0); // AHB1 clock hattý A portu için aktifleþtirildi
 80001cc:	4a0b      	ldr	r2, [pc, #44]	; (80001fc <button_init+0x34>)
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <button_init+0x34>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIOA mode registerlarý reset durumunda input olduðu için deðiþiklik yapýlmadý

	// GPIO pull-up/pull-down registerlarý ayarlanýr
	GPIOA->PUPDR |= (1 << 1); // A portu 0. pini pull-down olarak ayarlandý
 80001d8:	4a09      	ldr	r2, [pc, #36]	; (8000200 <button_init+0x38>)
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <button_init+0x38>)
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1 << 3); // A portu 1. pini pull-down olarak ayarlandý
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <button_init+0x38>)
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <button_init+0x38>)
 80001e8:	68db      	ldr	r3, [r3, #12]
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	60d3      	str	r3, [r2, #12]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020000 	.word	0x40020000

08000204 <button_up>:
uint8_t button_up(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & (1 << 0)) // A portunun 0. pini kontrol edilir
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <button_up+0x20>)
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <button_up+0x14>
		return 1;
 8000214:	2301      	movs	r3, #1
 8000216:	e000      	b.n	800021a <button_up+0x16>
	else
		return 0;
 8000218:	2300      	movs	r3, #0
}
 800021a:	4618      	mov	r0, r3
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	40020000 	.word	0x40020000

08000228 <button_down>:
uint8_t button_down(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & (1 << 1)) // A portunun 1. pini kontrol edilir
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <button_down+0x20>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <button_down+0x14>
		return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e000      	b.n	800023e <button_down+0x16>
	else
		return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	40020000 	.word	0x40020000

0800024c <rcc_clock_config>:
#include "stm32f4xx.h"

void rcc_clock_config()
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	// RCC clock control register reset deðerleri = 0x0000 XX83
	RCC->CR |= (1 << 16); // HSE açýldý
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <rcc_clock_config+0xd0>)
 8000252:	4b32      	ldr	r3, [pc, #200]	; (800031c <rcc_clock_config+0xd0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800025a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1 << 17))); // HSE için bayraðýn kontrolü yapýlýr
 800025c:	bf00      	nop
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <rcc_clock_config+0xd0>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f9      	beq.n	800025e <rcc_clock_config+0x12>

	RCC->CR |= (1 << 19); // Clock System Security System aktif hale getirilir
 800026a:	4a2c      	ldr	r2, [pc, #176]	; (800031c <rcc_clock_config+0xd0>)
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <rcc_clock_config+0xd0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000274:	6013      	str	r3, [r2, #0]

	// PLL açýlmadan önce PLL konfigürasyonu yapýlýr.
	// PLL deðerlerinin bulunduðu RCC PLL configuration register reset deðerleri = 0x2400 3010
	RCC->PLLCFGR = 0x00000000; // PLL deðerleri sýfýrlanýr.
 8000276:	4b29      	ldr	r3, [pc, #164]	; (800031c <rcc_clock_config+0xd0>)
 8000278:	2200      	movs	r2, #0
 800027a:	605a      	str	r2, [r3, #4]
	RCC->PLLCFGR |= 1 << 22; // PLL için HSE seçildi
 800027c:	4a27      	ldr	r2, [pc, #156]	; (800031c <rcc_clock_config+0xd0>)
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <rcc_clock_config+0xd0>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000286:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (1 << 2); // PLLM deðeri 4 yapýldý
 8000288:	4a24      	ldr	r2, [pc, #144]	; (800031c <rcc_clock_config+0xd0>)
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <rcc_clock_config+0xd0>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f043 0304 	orr.w	r3, r3, #4
 8000292:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (168 << 6); // PLLN deðeri 168 yapýldý
 8000294:	4a21      	ldr	r2, [pc, #132]	; (800031c <rcc_clock_config+0xd0>)
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <rcc_clock_config+0xd0>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 800029e:	6053      	str	r3, [r2, #4]
	// PLLP deðerinin 4 olmasý için PLLP0 ve PLLP1 deðerlerinin 0 olmasý gerekir
	RCC->PLLCFGR |= (1 << 26); // PLLQ deðeri 4 olarak ayarlandý.
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <rcc_clock_config+0xd0>)
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <rcc_clock_config+0xd0>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002aa:	6053      	str	r3, [r2, #4]

	// PLL ayarlarý yapýldýktan sonra PLL aktif hale getirilir
	RCC->CR |= (1 << 24); // PLL aktif hale getirildi
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <rcc_clock_config+0xd0>)
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <rcc_clock_config+0xd0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1 << 25))); // PLL aktifleþtirme bayraðý kontrol edilir
 80002b8:	bf00      	nop
 80002ba:	4b18      	ldr	r3, [pc, #96]	; (800031c <rcc_clock_config+0xd0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <rcc_clock_config+0x6e>

	// RCC clock configuration register reset deðeri = 0x0000 0000
	RCC->CFGR |= (1 << 1); // System clock switch ile PLL seçildi
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <rcc_clock_config+0xd0>)
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <rcc_clock_config+0xd0>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f043 0302 	orr.w	r3, r3, #2
 80002d0:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & (1 << 3))); // System clock switch PLL bayraðý kontrol edildi
 80002d2:	bf00      	nop
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <rcc_clock_config+0xd0>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <rcc_clock_config+0x88>

	// AHB prescaler deðeri 1 olmasý durumunda deðerlerin 0 olmasý gerekir. Bu nedenle deðiþiklik yapmayacaðýz
	RCC->CFGR |= (5 << 10); // APB1 prescaler deðeri 4 olarak ayarlanýr
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <rcc_clock_config+0xd0>)
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <rcc_clock_config+0xd0>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002ea:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (1 << 15); // APB2 prescaler deðeri 2 olarak ayarlanýr
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <rcc_clock_config+0xd0>)
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <rcc_clock_config+0xd0>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f6:	6093      	str	r3, [r2, #8]

	RCC->CIR |= (1 << 19); // HSE ready interrupt bayraðý temizlendi
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <rcc_clock_config+0xd0>)
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <rcc_clock_config+0xd0>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000302:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= (1 << 23); // Clock security system interrupt bayraðý temizlendi
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <rcc_clock_config+0xd0>)
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <rcc_clock_config+0xd0>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800

08000320 <display_init>:
#include "stm32f4xx.h"

void display_init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 4); // AHB1 clock hattý E portu için aktifleþtirildi
 8000324:	4a4d      	ldr	r2, [pc, #308]	; (800045c <display_init+0x13c>)
 8000326:	4b4d      	ldr	r3, [pc, #308]	; (800045c <display_init+0x13c>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOE->MODER |= (1 << 14);
 8000330:	4a4b      	ldr	r2, [pc, #300]	; (8000460 <display_init+0x140>)
 8000332:	4b4b      	ldr	r3, [pc, #300]	; (8000460 <display_init+0x140>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 15); // E portu 7. pini output
 800033c:	4a48      	ldr	r2, [pc, #288]	; (8000460 <display_init+0x140>)
 800033e:	4b48      	ldr	r3, [pc, #288]	; (8000460 <display_init+0x140>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 16);
 8000348:	4a45      	ldr	r2, [pc, #276]	; (8000460 <display_init+0x140>)
 800034a:	4b45      	ldr	r3, [pc, #276]	; (8000460 <display_init+0x140>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000352:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 17); // E portu 8. pini output
 8000354:	4a42      	ldr	r2, [pc, #264]	; (8000460 <display_init+0x140>)
 8000356:	4b42      	ldr	r3, [pc, #264]	; (8000460 <display_init+0x140>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 18);
 8000360:	4a3f      	ldr	r2, [pc, #252]	; (8000460 <display_init+0x140>)
 8000362:	4b3f      	ldr	r3, [pc, #252]	; (8000460 <display_init+0x140>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 19); // E portu 9. pini output
 800036c:	4a3c      	ldr	r2, [pc, #240]	; (8000460 <display_init+0x140>)
 800036e:	4b3c      	ldr	r3, [pc, #240]	; (8000460 <display_init+0x140>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 20);
 8000378:	4a39      	ldr	r2, [pc, #228]	; (8000460 <display_init+0x140>)
 800037a:	4b39      	ldr	r3, [pc, #228]	; (8000460 <display_init+0x140>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 21); // E portu 10. pini output
 8000384:	4a36      	ldr	r2, [pc, #216]	; (8000460 <display_init+0x140>)
 8000386:	4b36      	ldr	r3, [pc, #216]	; (8000460 <display_init+0x140>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800038e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 22);
 8000390:	4a33      	ldr	r2, [pc, #204]	; (8000460 <display_init+0x140>)
 8000392:	4b33      	ldr	r3, [pc, #204]	; (8000460 <display_init+0x140>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800039a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 23); // E portu 11. pini output
 800039c:	4a30      	ldr	r2, [pc, #192]	; (8000460 <display_init+0x140>)
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <display_init+0x140>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80003a6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 24);
 80003a8:	4a2d      	ldr	r2, [pc, #180]	; (8000460 <display_init+0x140>)
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <display_init+0x140>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 25); // E portu 12. pini output
 80003b4:	4a2a      	ldr	r2, [pc, #168]	; (8000460 <display_init+0x140>)
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <display_init+0x140>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80003be:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 26);
 80003c0:	4a27      	ldr	r2, [pc, #156]	; (8000460 <display_init+0x140>)
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <display_init+0x140>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 27); // E portu 13. pini output
 80003cc:	4a24      	ldr	r2, [pc, #144]	; (8000460 <display_init+0x140>)
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <display_init+0x140>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003d6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 28);
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <display_init+0x140>)
 80003da:	4b21      	ldr	r3, [pc, #132]	; (8000460 <display_init+0x140>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1 << 29); // E portu 14. pini output
 80003e4:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <display_init+0x140>)
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <display_init+0x140>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003ee:	6013      	str	r3, [r2, #0]

	// GPIO output type register reset deðerleri push-pull olduðu için deðiþtirilmedi

	// GPIO output speed register ayarlarý yapýlýr
	GPIOE->OSPEEDR |= (3 << 14); // 7. pin very high speed seçildi
 80003f0:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <display_init+0x140>)
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <display_init+0x140>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003fa:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 16); // 8. pin very high speed seçildi
 80003fc:	4a18      	ldr	r2, [pc, #96]	; (8000460 <display_init+0x140>)
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <display_init+0x140>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000406:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 18); // 9. pin very high speed seçildi
 8000408:	4a15      	ldr	r2, [pc, #84]	; (8000460 <display_init+0x140>)
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <display_init+0x140>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000412:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 20); // 10. pin very high speed seçildi
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <display_init+0x140>)
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <display_init+0x140>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800041e:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 22); // 11. pin very high speed seçildi
 8000420:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <display_init+0x140>)
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <display_init+0x140>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800042a:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 24); // 12. pin very high speed seçildi
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <display_init+0x140>)
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <display_init+0x140>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000436:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 26); // 13. pin very high speed seçildi
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <display_init+0x140>)
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <display_init+0x140>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000442:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (3 << 28); // 14. pin very high speed seçildi
 8000444:	4a06      	ldr	r2, [pc, #24]	; (8000460 <display_init+0x140>)
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <display_init+0x140>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800044e:	6093      	str	r3, [r2, #8]

	// GPIO pull-up/pull-down registerlarý reset olarak no pull-up, pull-down olduðu için deðiþtirilmedi
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40023800 	.word	0x40023800
 8000460:	40021000 	.word	0x40021000

08000464 <display>:
void display(uint8_t led)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	// ortak katot 7 segment 0-F arasýnda deðerler alýr
	switch(led)
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	3b01      	subs	r3, #1
 8000472:	2b0e      	cmp	r3, #14
 8000474:	f200 80e5 	bhi.w	8000642 <display+0x1de>
 8000478:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <display+0x1c>)
 800047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047e:	bf00      	nop
 8000480:	080004bd 	.word	0x080004bd
 8000484:	080004d7 	.word	0x080004d7
 8000488:	080004f1 	.word	0x080004f1
 800048c:	0800050b 	.word	0x0800050b
 8000490:	08000525 	.word	0x08000525
 8000494:	0800053f 	.word	0x0800053f
 8000498:	08000559 	.word	0x08000559
 800049c:	08000573 	.word	0x08000573
 80004a0:	0800058d 	.word	0x0800058d
 80004a4:	080005a7 	.word	0x080005a7
 80004a8:	080005c1 	.word	0x080005c1
 80004ac:	080005db 	.word	0x080005db
 80004b0:	080005f5 	.word	0x080005f5
 80004b4:	0800060f 	.word	0x0800060f
 80004b8:	08000629 	.word	0x08000629
	{
	case 1:
	GPIOE->ODR &= ~(255 << 7);
 80004bc:	4a6a      	ldr	r2, [pc, #424]	; (8000668 <display+0x204>)
 80004be:	4b6a      	ldr	r3, [pc, #424]	; (8000668 <display+0x204>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004c6:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (195 << 8);
 80004c8:	4a67      	ldr	r2, [pc, #412]	; (8000668 <display+0x204>)
 80004ca:	4b67      	ldr	r3, [pc, #412]	; (8000668 <display+0x204>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
 80004d2:	6153      	str	r3, [r2, #20]
	break;
 80004d4:	e0c2      	b.n	800065c <display+0x1f8>
	case 2:
	GPIOE->ODR &= ~(255 << 7);
 80004d6:	4a64      	ldr	r2, [pc, #400]	; (8000668 <display+0x204>)
 80004d8:	4b63      	ldr	r3, [pc, #396]	; (8000668 <display+0x204>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004e0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (219 << 7);
 80004e2:	4a61      	ldr	r2, [pc, #388]	; (8000668 <display+0x204>)
 80004e4:	4b60      	ldr	r3, [pc, #384]	; (8000668 <display+0x204>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f443 43db 	orr.w	r3, r3, #28032	; 0x6d80
 80004ec:	6153      	str	r3, [r2, #20]
	break;
 80004ee:	e0b5      	b.n	800065c <display+0x1f8>
	case 3:
	GPIOE->ODR &= ~(255 << 7);
 80004f0:	4a5d      	ldr	r2, [pc, #372]	; (8000668 <display+0x204>)
 80004f2:	4b5d      	ldr	r3, [pc, #372]	; (8000668 <display+0x204>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004fa:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (207 << 7);
 80004fc:	4a5a      	ldr	r2, [pc, #360]	; (8000668 <display+0x204>)
 80004fe:	4b5a      	ldr	r3, [pc, #360]	; (8000668 <display+0x204>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f443 43cf 	orr.w	r3, r3, #26496	; 0x6780
 8000506:	6153      	str	r3, [r2, #20]
	break;
 8000508:	e0a8      	b.n	800065c <display+0x1f8>
	case 4:
	GPIOE->ODR &= ~(255 << 7);
 800050a:	4a57      	ldr	r2, [pc, #348]	; (8000668 <display+0x204>)
 800050c:	4b56      	ldr	r3, [pc, #344]	; (8000668 <display+0x204>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000514:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (115 << 8);
 8000516:	4a54      	ldr	r2, [pc, #336]	; (8000668 <display+0x204>)
 8000518:	4b53      	ldr	r3, [pc, #332]	; (8000668 <display+0x204>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f443 43e6 	orr.w	r3, r3, #29440	; 0x7300
 8000520:	6153      	str	r3, [r2, #20]
	break;
 8000522:	e09b      	b.n	800065c <display+0x1f8>
	case 5:
	GPIOE->ODR &= ~(255 << 7);
 8000524:	4a50      	ldr	r2, [pc, #320]	; (8000668 <display+0x204>)
 8000526:	4b50      	ldr	r3, [pc, #320]	; (8000668 <display+0x204>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800052e:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (237 << 7);
 8000530:	4a4d      	ldr	r2, [pc, #308]	; (8000668 <display+0x204>)
 8000532:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <display+0x204>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f443 43ed 	orr.w	r3, r3, #30336	; 0x7680
 800053a:	6153      	str	r3, [r2, #20]
	break;
 800053c:	e08e      	b.n	800065c <display+0x1f8>
	case 6:
	GPIOE->ODR &= ~(255 << 7);
 800053e:	4a4a      	ldr	r2, [pc, #296]	; (8000668 <display+0x204>)
 8000540:	4b49      	ldr	r3, [pc, #292]	; (8000668 <display+0x204>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000548:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (253 << 7);
 800054a:	4a47      	ldr	r2, [pc, #284]	; (8000668 <display+0x204>)
 800054c:	4b46      	ldr	r3, [pc, #280]	; (8000668 <display+0x204>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f443 43fd 	orr.w	r3, r3, #32384	; 0x7e80
 8000554:	6153      	str	r3, [r2, #20]
	break;
 8000556:	e081      	b.n	800065c <display+0x1f8>
	case 7:
	GPIOE->ODR &= ~(255 << 7);
 8000558:	4a43      	ldr	r2, [pc, #268]	; (8000668 <display+0x204>)
 800055a:	4b43      	ldr	r3, [pc, #268]	; (8000668 <display+0x204>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000562:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (135 << 7);
 8000564:	4a40      	ldr	r2, [pc, #256]	; (8000668 <display+0x204>)
 8000566:	4b40      	ldr	r3, [pc, #256]	; (8000668 <display+0x204>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f443 4387 	orr.w	r3, r3, #17280	; 0x4380
 800056e:	6153      	str	r3, [r2, #20]
	break;
 8000570:	e074      	b.n	800065c <display+0x1f8>
	case 8:
	GPIOE->ODR &= ~(255 << 7);
 8000572:	4a3d      	ldr	r2, [pc, #244]	; (8000668 <display+0x204>)
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <display+0x204>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800057c:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (255 << 7);
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <display+0x204>)
 8000580:	4b39      	ldr	r3, [pc, #228]	; (8000668 <display+0x204>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	f443 43ff 	orr.w	r3, r3, #32640	; 0x7f80
 8000588:	6153      	str	r3, [r2, #20]
	break;
 800058a:	e067      	b.n	800065c <display+0x1f8>
	case 9:
	GPIOE->ODR &= ~(255 << 7);
 800058c:	4a36      	ldr	r2, [pc, #216]	; (8000668 <display+0x204>)
 800058e:	4b36      	ldr	r3, [pc, #216]	; (8000668 <display+0x204>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000596:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (239 << 7);
 8000598:	4a33      	ldr	r2, [pc, #204]	; (8000668 <display+0x204>)
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <display+0x204>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f443 43ef 	orr.w	r3, r3, #30592	; 0x7780
 80005a2:	6153      	str	r3, [r2, #20]
	break;
 80005a4:	e05a      	b.n	800065c <display+0x1f8>
	case 10:
	GPIOE->ODR &= ~(255 << 7);
 80005a6:	4a30      	ldr	r2, [pc, #192]	; (8000668 <display+0x204>)
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <display+0x204>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80005b0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (247 << 7);
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <display+0x204>)
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <display+0x204>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f443 43f7 	orr.w	r3, r3, #31616	; 0x7b80
 80005bc:	6153      	str	r3, [r2, #20]
	break;
 80005be:	e04d      	b.n	800065c <display+0x1f8>
	case 11:
	GPIOE->ODR &= ~(255 << 7);
 80005c0:	4a29      	ldr	r2, [pc, #164]	; (8000668 <display+0x204>)
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <display+0x204>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80005ca:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (127 << 7);
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <display+0x204>)
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <display+0x204>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 537e 	orr.w	r3, r3, #16256	; 0x3f80
 80005d6:	6153      	str	r3, [r2, #20]
	break;
 80005d8:	e040      	b.n	800065c <display+0x1f8>
	case 12:
	GPIOE->ODR &= ~(255 << 7);
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <display+0x204>)
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <display+0x204>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80005e4:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (185 << 7);
 80005e6:	4a20      	ldr	r2, [pc, #128]	; (8000668 <display+0x204>)
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <display+0x204>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f443 43b9 	orr.w	r3, r3, #23680	; 0x5c80
 80005f0:	6153      	str	r3, [r2, #20]
	break;
 80005f2:	e033      	b.n	800065c <display+0x1f8>
	case 13:
	GPIOE->ODR &= ~(255 << 7);
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <display+0x204>)
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <display+0x204>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80005fe:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (63 << 7);
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <display+0x204>)
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <display+0x204>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f443 53fc 	orr.w	r3, r3, #8064	; 0x1f80
 800060a:	6153      	str	r3, [r2, #20]
	break;
 800060c:	e026      	b.n	800065c <display+0x1f8>
	case 14:
	GPIOE->ODR &= ~(255 << 7);
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <display+0x204>)
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <display+0x204>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000618:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (249 << 7);
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <display+0x204>)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <display+0x204>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f443 43f9 	orr.w	r3, r3, #31872	; 0x7c80
 8000624:	6153      	str	r3, [r2, #20]
	break;
 8000626:	e019      	b.n	800065c <display+0x1f8>
	case 15:
	GPIOE->ODR &= ~(255 << 7);
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <display+0x204>)
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <display+0x204>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000632:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (241 << 7);
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <display+0x204>)
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <display+0x204>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f443 43f1 	orr.w	r3, r3, #30848	; 0x7880
 800063e:	6153      	str	r3, [r2, #20]
	break;
 8000640:	e00c      	b.n	800065c <display+0x1f8>
	default:
	GPIOE->ODR &= ~(255 << 7);
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <display+0x204>)
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <display+0x204>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800064c:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (191 << 7);
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <display+0x204>)
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <display+0x204>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f443 43bf 	orr.w	r3, r3, #24448	; 0x5f80
 8000658:	6153      	str	r3, [r2, #20]
	break;
 800065a:	bf00      	nop
	}
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <RCC_DeInit+0x50>)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <RCC_DeInit+0x50>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <RCC_DeInit+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <RCC_DeInit+0x50>)
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <RCC_DeInit+0x50>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800068c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <RCC_DeInit+0x50>)
 8000694:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <RCC_DeInit+0x54>)
 8000696:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <RCC_DeInit+0x50>)
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <RCC_DeInit+0x58>)
 800069c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <RCC_DeInit+0x50>)
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <RCC_DeInit+0x50>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <RCC_DeInit+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40023800 	.word	0x40023800
 80006c0:	24003010 	.word	0x24003010
 80006c4:	20003000 	.word	0x20003000

080006c8 <main>:


uint8_t count = 0;

int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	// Sistem clock ayarlarý açýlýþta 168MHz'dir. Önce RCC_DeInit() ile 16MHz. yapýlýp sonra tekrar ayarlandý
	RCC_DeInit();
 80006ce:	f7ff ffcd 	bl	800066c <RCC_DeInit>
	SystemCoreClockUpdate();
 80006d2:	f000 f8e5 	bl	80008a0 <SystemCoreClockUpdate>

	rcc_clock_config(); // Kendi kodlarýmýzla sistem clock ayarlarý 168MHz. olarak ayarlandý
 80006d6:	f7ff fdb9 	bl	800024c <rcc_clock_config>
	SystemCoreClockUpdate();
 80006da:	f000 f8e1 	bl	80008a0 <SystemCoreClockUpdate>

	button_init(); // Buton GPIO ayarlarý yapýldý
 80006de:	f7ff fd73 	bl	80001c8 <button_init>
	display_init(); // 7 segment display kontrolü için GPIO ayarlarý yapýldý
 80006e2:	f7ff fe1d 	bl	8000320 <display_init>

  while (1)
  {
	  if(1 == button_up()) // Deðerleri artýran buton kontrol edildi
 80006e6:	f7ff fd8d 	bl	8000204 <button_up>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d11c      	bne.n	800072a <main+0x62>
	  {
		  while(1 == button_up()); // Butondan elimizin çekilmesi bekleniyor
 80006f0:	bf00      	nop
 80006f2:	f7ff fd87 	bl	8000204 <button_up>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d0fa      	beq.n	80006f2 <main+0x2a>
		  for(int i = 16800000; i < 0; i--); // Buton arkýný önlemek için beklenir
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <main+0xb4>)
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	e002      	b.n	8000708 <main+0x40>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3b01      	subs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	dbf9      	blt.n	8000702 <main+0x3a>
		  if(15 == count) // Sayacýn 15'ten fazla olmasý durumunda sayaç 0 deðerine döner
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <main+0xb8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b0f      	cmp	r3, #15
 8000714:	d103      	bne.n	800071e <main+0x56>
			  count = 0;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <main+0xb8>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	e005      	b.n	800072a <main+0x62>
		  else
			  count++;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <main+0xb8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0xb8>)
 8000728:	701a      	strb	r2, [r3, #0]
	  }
	  if(1 == button_down()) // Deðerleri azaltan buton kontrol edildi
 800072a:	f7ff fd7d 	bl	8000228 <button_down>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d11c      	bne.n	800076e <main+0xa6>
	  {
		  while(1 == button_down()); // Butondan elimizin çekilmesi bekleniyor
 8000734:	bf00      	nop
 8000736:	f7ff fd77 	bl	8000228 <button_down>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d0fa      	beq.n	8000736 <main+0x6e>
		  for(int i = 16800000; i < 0; i--); // Buton arkýný önlemek için beklenir
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <main+0xb4>)
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	e002      	b.n	800074c <main+0x84>
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	dbf9      	blt.n	8000746 <main+0x7e>
		  if (0 == count) // Sayacýn 0'dan az olmasý durumunda sayaç 15(F) deðerine döner
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0xb8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d103      	bne.n	8000762 <main+0x9a>
			  count = 15;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <main+0xb8>)
 800075c:	220f      	movs	r2, #15
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	e005      	b.n	800076e <main+0xa6>
		  else
			  count--;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <main+0xb8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <main+0xb8>)
 800076c:	701a      	strb	r2, [r3, #0]
	  }

	  display(count);
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <main+0xb8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fe76 	bl	8000464 <display>
	  if(1 == button_up()) // Deðerleri artýran buton kontrol edildi
 8000778:	e7b5      	b.n	80006e6 <main+0x1e>
 800077a:	bf00      	nop
 800077c:	01005900 	.word	0x01005900
 8000780:	20000030 	.word	0x20000030

08000784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800078a:	e003      	b.n	8000794 <LoopCopyDataInit>

0800078c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800078e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000792:	3104      	adds	r1, #4

08000794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800079a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800079c:	d3f6      	bcc.n	800078c <CopyDataInit>
  ldr  r2, =_sbss
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007a0:	e002      	b.n	80007a8 <LoopFillZerobss>

080007a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007a4:	f842 3b04 	str.w	r3, [r2], #4

080007a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007ac:	d3f9      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007ae:	f000 f841 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b2:	f000 f96d 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b6:	f7ff ff87 	bl	80006c8 <main>
  bx  lr    
 80007ba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007c0:	08000af8 	.word	0x08000af8
  ldr  r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007c8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80007cc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80007d0:	20000034 	.word	0x20000034

080007d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC_IRQHandler>

080007d6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <HardFault_Handler+0x4>

080007ea <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <BusFault_Handler+0x4>

080007f6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <SystemInit+0x60>)
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <SystemInit+0x60>)
 800083c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <SystemInit+0x64>)
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <SystemInit+0x64>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <SystemInit+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <SystemInit+0x64>)
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <SystemInit+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000868:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <SystemInit+0x64>)
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <SystemInit+0x68>)
 800086e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <SystemInit+0x64>)
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <SystemInit+0x64>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000882:	f000 f889 	bl	8000998 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000886:	4b03      	ldr	r3, [pc, #12]	; (8000894 <SystemInit+0x60>)
 8000888:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088c:	609a      	str	r2, [r3, #8]
#endif
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	40023800 	.word	0x40023800
 800089c:	24003010 	.word	0x24003010

080008a0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	2302      	movs	r3, #2
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	2302      	movs	r3, #2
 80008b8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 030c 	and.w	r3, r3, #12
 80008c2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d007      	beq.n	80008da <SystemCoreClockUpdate+0x3a>
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d009      	beq.n	80008e2 <SystemCoreClockUpdate+0x42>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d13d      	bne.n	800094e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 80008d4:	4a2d      	ldr	r2, [pc, #180]	; (800098c <SystemCoreClockUpdate+0xec>)
 80008d6:	601a      	str	r2, [r3, #0]
      break;
 80008d8:	e03d      	b.n	8000956 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 80008dc:	4a2c      	ldr	r2, [pc, #176]	; (8000990 <SystemCoreClockUpdate+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
      break;
 80008e0:	e039      	b.n	8000956 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	0d9b      	lsrs	r3, r3, #22
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008f6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008fe:	4a24      	ldr	r2, [pc, #144]	; (8000990 <SystemCoreClockUpdate+0xf0>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 8000908:	6852      	ldr	r2, [r2, #4]
 800090a:	0992      	lsrs	r2, r2, #6
 800090c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	e00b      	b.n	8000930 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000918:	4a1c      	ldr	r2, [pc, #112]	; (800098c <SystemCoreClockUpdate+0xec>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 8000922:	6852      	ldr	r2, [r2, #4]
 8000924:	0992      	lsrs	r2, r2, #6
 8000926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	0c1b      	lsrs	r3, r3, #16
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	3301      	adds	r3, #1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	fbb2 f3f3 	udiv	r3, r2, r3
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 800094a:	6013      	str	r3, [r2, #0]
      break;
 800094c:	e003      	b.n	8000956 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <SystemCoreClockUpdate+0xec>)
 8000952:	601a      	str	r2, [r3, #0]
      break;
 8000954:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SystemCoreClockUpdate+0xe4>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 030f 	and.w	r3, r3, #15
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <SystemCoreClockUpdate+0xf4>)
 8000962:	5cd3      	ldrb	r3, [r2, r3]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	fa22 f303 	lsr.w	r3, r2, r3
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemCoreClockUpdate+0xe8>)
 8000974:	6013      	str	r3, [r2, #0]
}
 8000976:	bf00      	nop
 8000978:	371c      	adds	r7, #28
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	20000000 	.word	0x20000000
 800098c:	00f42400 	.word	0x00f42400
 8000990:	017d7840 	.word	0x017d7840
 8000994:	20000004 	.word	0x20000004

08000998 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <SetSysClock+0xe8>)
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <SetSysClock+0xe8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <SetSysClock+0xe8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <SetSysClock+0x38>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009ce:	d1f0      	bne.n	80009b2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <SetSysClock+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009dc:	2301      	movs	r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	e001      	b.n	80009e6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d142      	bne.n	8000a72 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <SetSysClock+0xe8>)
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <SetSysClock+0xe8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <SetSysClock+0xec>)
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <SetSysClock+0xec>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a02:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <SetSysClock+0xe8>)
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <SetSysClock+0xe8>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <SetSysClock+0xe8>)
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <SetSysClock+0xe8>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a16:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <SetSysClock+0xe8>)
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <SetSysClock+0xe8>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a22:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <SetSysClock+0xe8>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <SetSysClock+0xf0>)
 8000a28:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <SetSysClock+0xe8>)
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <SetSysClock+0xe8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a34:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a36:	bf00      	nop
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <SetSysClock+0xe8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f9      	beq.n	8000a38 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <SetSysClock+0xf4>)
 8000a46:	f240 7205 	movw	r2, #1797	; 0x705
 8000a4a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <SetSysClock+0xe8>)
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <SetSysClock+0xe8>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f023 0303 	bic.w	r3, r3, #3
 8000a56:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <SetSysClock+0xe8>)
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <SetSysClock+0xe8>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a64:	bf00      	nop
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SetSysClock+0xe8>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 030c 	and.w	r3, r3, #12
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d1f9      	bne.n	8000a66 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000
 8000a88:	07405419 	.word	0x07405419
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4e0d      	ldr	r6, [pc, #52]	; (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	; (8000acc <__libc_init_array+0x3c>)
 8000a96:	1ba4      	subs	r4, r4, r6
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	42a5      	cmp	r5, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4e0b      	ldr	r6, [pc, #44]	; (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 f818 	bl	8000ad8 <_init>
 8000aa8:	1ba4      	subs	r4, r4, r6
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2500      	movs	r5, #0
 8000aae:	42a5      	cmp	r5, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab8:	4798      	blx	r3
 8000aba:	3501      	adds	r5, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ac2:	4798      	blx	r3
 8000ac4:	3501      	adds	r5, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08000af0 	.word	0x08000af0
 8000acc:	08000af0 	.word	0x08000af0
 8000ad0:	08000af0 	.word	0x08000af0
 8000ad4:	08000af4 	.word	0x08000af4

08000ad8 <_init>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr

08000ae4 <_fini>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr
